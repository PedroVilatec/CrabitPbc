import sqlite3


conn = sqlite3.connect('/home/pi/Crabit/instance/banco/vilatec.db')
cursor = conn.cursor()

# cursor.execute("""
# 		CREATE TABLE IF NOT EXISTS`obito` (
# 		  `_id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
# 		  `nome` VARCHAR(200) NOT NULL,
# 		  `data_sepultamento` DATE NOT NULL,
# 		  `hora_sepultamento` TIME NOT NULL,
# 		  `loculo` INTEGER NOT NULL UNIQUE
# 		);
# 	""")

# cursor.execute("""
# 		CREATE TABLE IF NOT EXISTS `historico_obito` (
# 		  `_id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
# 		  `nome` VARCHAR(200) NOT NULL,
# 		  `data_sepultamento` DATE NOT NULL,
# 		  `hora_sepultamento` TIME NOT NULL,
# 		  `loculo` INTEGER NOT NULL
# 		);
# 	""")


# cursor.execute("""
# 		CREATE TABLE  IF NOT EXISTS `usuario` (
# 		  `_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
# 		  `nome` VARCHAR(200) NOT NULL,
# 		  `email` VARCHAR(200) NOT NULL UNIQUE
# 		);
# 	""")

# cursor.execute("""
# 		CREATE TABLE IF NOT EXISTS `sensor` (
# 		  `_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
# 		  `nome` VARCHAR(100) NOT NULL,
# 		  `valor_ideal` VARCHAR(100),
# 		  `intervalo` VARCHAR(100)
# 		);
# 	""")

# cursor.execute("""
# 		CREATE TABLE IF NOT EXISTS `tipo_sensor` (
# 		  `_id` VARCHAR(100) PRIMARY KEY NOT NULL,
# 		  `tipo` VARCHAR(100) NOT NULL
# 		);
# 	""")

# cursor.execute("""INSERT OR REPLACE INTO `tipo_sensor` (`_id`, `tipo`) VALUES (?, ?);""", ('sensor1', 'Temperatura'))
# cursor.execute("""INSERT OR REPLACE INTO `tipo_sensor` (`_id`, `tipo`) VALUES (?, ?);""", ('sensor2', 'Umidade'))
# cursor.execute("""INSERT OR REPLACE INTO `tipo_sensor` (`_id`, `tipo`) VALUES (?, ?);""", ('sensor3', 'Pressao'))


cursor.execute("""
		CREATE TABLE  IF NOT EXISTS `leitura_troca_gasosa` (
		  `_id` INTEGER PRIMARY KEY NOT NULL,
		  `codigo_cliente` VARCHAR(20),
		  `codigo_estacao` VARCHAR(20),
		  `codigo_bloco`   VARCHAR(20),
		  `codigo_sub_bloco`   VARCHAR(20),
		  `data_leitura`    DATETIME,
		  `duracao`			TIME,
		  `situacao_teste`	VARCHAR(40),
		   `mensagem`		VARCHAR(255),
		   `fluxo_de_ar`	DECIMAL(10,4),
		   `pressao`		DECIMAL(10,4),
		   `temperatura_media` DECIMAL(10,4),
		   `umidade` DECIMAL(10,4),
		   `frequencia`		DECIMAL(10,4),
		   `quantidade_sepultados` INTEGER,
		   `id_integracao`		INTEGER
		);
	""")

cursor.execute("""
		CREATE TABLE IF NOT EXISTS `leitura_estanqueidade` (
		  `_id` INTEGER PRIMARY KEY NOT NULL,
		  `codigo_cliente` VARCHAR(20),
		  `codigo_estacao` VARCHAR(20),
		  `codigo_bloco`   VARCHAR(20),
		  `codigo_sub_bloco`   VARCHAR(20),
		  `data_leitura`    DATETIME,
		  `duracao`			TIME,
		  `situacao_teste`	VARCHAR(40),
		   `mensagem`		VARCHAR(255),
		   `pressao_ideal`	DECIMAL(10,4),
		   `pressao_obtida`		DECIMAL(10,4),
		   `valor_analogo`		DECIMAL(10,4),
			`id_integracao`		INTEGER
		);
	""")

cursor.execute("""
		CREATE TABLE IF NOT EXISTS `leitura_equipamento` (
		  `_id` INTEGER PRIMARY KEY NOT NULL,
		  `codigo_cliente` VARCHAR(20),
		  `codigo_estacao` VARCHAR(20),
		  `codigo_bloco`   VARCHAR(20),
		  `codigo_sub_bloco`   VARCHAR(20),
		  `codigo_equipamento`   VARCHAR(60),
		  `data_leitura`    DATETIME,
		  `duracao`			TIME,
		  `situacao_teste`	VARCHAR(40),
		   `mensagem`		VARCHAR(255),
		   `valor`			DECIMAL(10,4),
		   `indicacao`		VARCHAR(40),
			`id_integracao`		INTEGER
		);
	""")


cursor.execute("""
		CREATE TABLE IF NOT EXISTS `leitura_operacao_equipamento` (
		  `_id`                 INTEGER PRIMARY KEY NOT NULL,
		  `codigo_cliente`      VARCHAR(20),
		  `codigo_estacao`      VARCHAR(20),
		  `codigo_equipamento`  VARCHAR(60),
		  `data_leitura`        DATETIME,
		  `situacao_teste`	    VARCHAR(40),
		  `mensagem`		    VARCHAR(255),
		  `quantidade`			INTEGER,
		  `id_integracao`		INTEGER
		);
	""")

conn.commit()

print("Tabela criada com sucesso!")

cursor.close()
conn.close()
